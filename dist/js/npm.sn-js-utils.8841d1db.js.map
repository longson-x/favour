{"version":3,"sources":["webpack:///./node_modules/sn-js-utils/dist/index.esm.js"],"names":["_createTypeOf","type","obj","Object","prototype","toString","call","isUndefined","isNull","isArray","Array","isFunction","isBoolean","isString","isNumber","isRegExp","isObject","isDate","isError","getType","isEmpty","key","trim","DiffDirection","TimeDimension","BaseUtil","phoneIsValid","phone","length","test","idcardIsValid","idcard","weight","validate","idcardCharArr","split","sum","i","mode","toUpperCase","maskPhone","start","len","substr","repeat","substring","maskIDCard","CommonUtil"],"mappings":"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","file":"js/npm.sn-js-utils.8841d1db.js","sourcesContent":["/*!\n * sn-js-utils 0.1.5-rc.10 (https://github.com/CozySnail/sn-js-utils)\n * API https://github.com/CozySnail/sn-js-utils/blob/master/doc/api.md\n * Copyright 2017-2019 CozySnail. All Rights Reserved\n * Licensed under MIT (https://github.com/CozySnail/sn-js-utils/blob/master/LICENSE)\n */\n\n/**\r\n * 创建一个自定义的 typeof 函数\r\n * @param {String} type 类型\r\n * @returns {Function} 返回一个可判断特定类型的谓词函数\r\n */\r\nfunction _createTypeOf(type) {\r\n    return function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object \" + type + \"]\";\r\n    };\r\n}\r\n/**\r\n * 判断是否为 undefined\r\n */\r\nvar isUndefined = _createTypeOf('Undefined');\r\n/**\r\n * 判断是否为 null\r\n */\r\nvar isNull = _createTypeOf('Null');\r\n/**\r\n * 判断是否为 Array 类型\r\n */\r\nvar isArray = Array.isArray || _createTypeOf('Array');\r\n/**\r\n * 判断是否为 Function 类型\r\n */\r\nvar isFunction = _createTypeOf('Function');\r\n/**\r\n * 判断是否为 Boolean 类型\r\n */\r\nvar isBoolean = _createTypeOf('Boolean');\r\n/**\r\n * 判断是否为 String 类型\r\n */\r\nvar isString = _createTypeOf('String');\r\n/**\r\n * 判断是否为 Number 类型\r\n */\r\nvar isNumber = _createTypeOf('Number');\r\n/**\r\n * 判断是否为 RegExp 类型\r\n */\r\nvar isRegExp = _createTypeOf('RegExp');\r\n/**\r\n * 判断是否为 Object 类型\r\n */\r\nvar isObject = _createTypeOf('Object');\r\n/**\r\n * 判断是否为 Date 类型\r\n */\r\nvar isDate = _createTypeOf('Date');\r\n/**\r\n * 判断是否为 Error 类型\r\n */\r\nvar isError = _createTypeOf('Error');\r\n/**\r\n * 获取对象的类型\r\n * @param obj\r\n */\r\nfunction getType(obj) {\r\n    if (isUndefined(obj)) {\r\n        return 'undefined';\r\n    }\r\n    if (isNull(obj)) {\r\n        return 'null';\r\n    }\r\n    if (isArray(obj)) {\r\n        return 'array';\r\n    }\r\n    if (isFunction(obj)) {\r\n        return 'function';\r\n    }\r\n    if (isBoolean(obj)) {\r\n        return 'boolean';\r\n    }\r\n    if (isString(obj)) {\r\n        return 'string';\r\n    }\r\n    if (isNumber(obj)) {\r\n        return 'number';\r\n    }\r\n    if (isRegExp(obj)) {\r\n        return 'regexp';\r\n    }\r\n    if (isObject(obj)) {\r\n        return 'object';\r\n    }\r\n    if (isDate(obj)) {\r\n        return 'date';\r\n    }\r\n    if (isError(obj)) {\r\n        return 'error';\r\n    }\r\n    return typeof obj;\r\n}\r\n/**\r\n * 判断是否为空，包括空对象，空数组，空字符串，null，undefined\r\n * @param obj 任意对象\r\n */\r\nfunction isEmpty(obj) {\r\n    if (isString(obj)) {\r\n        obj = obj.trim();\r\n    }\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nvar BaseUtil = {\r\n    isUndefined: isUndefined,\r\n    isNull: isNull,\r\n    isArray: isArray,\r\n    isFunction: isFunction,\r\n    isBoolean: isBoolean,\r\n    isString: isString,\r\n    isNumber: isNumber,\r\n    isRegExp: isRegExp,\r\n    isObject: isObject,\r\n    isDate: isDate,\r\n    isError: isError,\r\n    getType: getType,\r\n    isEmpty: isEmpty,\r\n};\n\n/**\r\n * 日期工具类\r\n * @Author snail\r\n */\r\nvar dateFormatRules = [\r\n    { rules: [['yyyy', 4]] },\r\n    { rules: [['MM', 2], ['M', 1]], offset: -1 },\r\n    { rules: [['dd', 2], ['d', 1]] },\r\n    { rules: [['HH', 2], ['H', 1]] },\r\n    { rules: [['mm', 2], ['m', 1]] },\r\n    { rules: [['ss', 2], ['s', 1]] },\r\n    { rules: [['SSS', 3], ['SS', 2], ['S', 1]] },\r\n];\r\n/**\r\n * 将 字符串/时间戳 解析成日期对象\r\n * @param {Date | String | Number} date 输入的日期字符串，如'2014-09-13',或者时间戳\r\n * @param {String} format 字符串格式，默认'yyyy-MM-dd'，支持如下：y、M、d、H、m、s、S\r\n * @returns {Date} 解析后的Date对象\r\n *\r\n * @example\r\n *  parseDate('2018-11-26'); // new Date(2018, 10, 26)\r\n *  parseDate('11/26/2018', 'MM/dd/yyyy') // new Date(2018, 10, 26)\r\n *  parseDate('2018-11-26 13:28:43', 'yyyy-MM-dd HH:mm:ss') // new Date(2018, 10, 26, 13, 28, 43)\r\n *  parseDate('2018年11月26日', 'yyyy年MM月dd日') // new Date(2018, 10, 26)\r\n *  parseDate('2018年11月26日 11时40分', 'yyyy年MM月dd日 HH时mm分') // new Date(2018, 10, 26, 11, 40)\r\n *\r\n * @throws 如果传入的 date 参数不符合要求的类型，则抛出 TypeError 错误\r\n */\r\nfunction parseDate(date, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    // 如果传入的是日期对象，则不需解析，直接返回\r\n    if (BaseUtil.isDate(date)) {\r\n        return date;\r\n    }\r\n    // 如果传入的是数字，则被认为是时间戳\r\n    if (BaseUtil.isNumber(date)) {\r\n        return new Date(date);\r\n    }\r\n    // 如果不是字符串，则表示类型不支持\r\n    if (!BaseUtil.isString(date)) {\r\n        throw TypeError('invalid date');\r\n    }\r\n    var dateStr = date;\r\n    var rule = [];\r\n    var sIndex = 0;\r\n    var dates = [];\r\n    dateFormatRules.forEach(function (item) {\r\n        for (var index = 0, rules = item.rules, len = rules.length; index < len; index++) {\r\n            rule = rules[index];\r\n            sIndex = format.indexOf(rule[0]);\r\n            if (sIndex !== -1) {\r\n                dates.push(parseFloat(dateStr.substring(sIndex, sIndex + rule[1])) + (item.offset || 0));\r\n                // 如果匹配到规则中的第一条，则退出\r\n                break;\r\n            }\r\n            else if (index === len - 1) {\r\n                // 如果是规则中的最后一条，说明format格式中没有出现该字段\r\n                dates.push(0);\r\n            }\r\n        }\r\n    });\r\n    return new Date(dates[0], dates[1], dates[2], dates[3], dates[4], dates[5], dates[6]);\r\n}\r\n/**\r\n * 将日期格式化成指定格式的字符串\r\n * @param {Date | Number} date 要格式化的日期，不传时默认当前时间，也可以是一个时间戳\r\n * @param {String} format 目标字符串格式，支持的字符有：y,M,d,q,w,H,h,m,S，默认：yyyy-MM-dd HH:mm:ss\r\n * @returns {String} 返回格式化后的日期字符串，日期不合法时返回字符串 'invalid date'\r\n *\r\n * @example\r\n *  formatDate(); // 2016-09-02 13:17:13\r\n *  formatDate(new Date(), 'yyyy-MM-dd'); // 2016-09-02\r\n *  formatDate(new Date(), 'yyyy-MM-dd 第q季度 www HH:mm:ss:SSS'); // 2016-09-02 第3季度 星期五 13:19:15:792\r\n *  formatDate(1472793615764); // 2016-09-02 13:20:15\r\n */\r\nfunction formatDate(date, format) {\r\n    if (date === void 0) { date = new Date(); }\r\n    if (format === void 0) { format = 'yyyy-MM-dd HH:mm:ss'; }\r\n    if (BaseUtil.isDate(date)) {\r\n        // nop\r\n    }\r\n    else if (BaseUtil.isNumber(date)) {\r\n        date = new Date(date);\r\n    }\r\n    else {\r\n        return 'invalid date';\r\n    }\r\n    date = date;\r\n    var obj = {\r\n        y: date.getFullYear(),\r\n        M: date.getMonth() + 1,\r\n        d: date.getDate(),\r\n        q: Math.floor((date.getMonth() + 3) / 3),\r\n        w: date.getDay(),\r\n        H: date.getHours(),\r\n        h: date.getHours() % 12 === 0 ? 12 : date.getHours() % 12,\r\n        m: date.getMinutes(),\r\n        s: date.getSeconds(),\r\n        S: date.getMilliseconds(),\r\n    };\r\n    var week = ['天', '一', '二', '三', '四', '五', '六'];\r\n    var _loop_1 = function (i) {\r\n        format = format.replace(new RegExp(i + '+', 'g'), function (m) {\r\n            var val = obj[i] + '';\r\n            if (i === 'w') {\r\n                return (m.length > 2 ? '星期' : '周') + week[val];\r\n            }\r\n            for (var j = 0, len = val.length; j < m.length - len; j++) {\r\n                val = '0' + val;\r\n            }\r\n            return m.length === 1 ? val : val.substring(val.length - m.length);\r\n        });\r\n    };\r\n    for (var i in obj) {\r\n        _loop_1(i);\r\n    }\r\n    return format;\r\n}\r\n/**\r\n * 将一个日期格式化成友好格式，比如，1分钟以内的返回“刚刚”，\r\n * 当天的返回时分，当年的返回月日，否则，返回年月日\r\n * @param {Date | number} date 如: new Date('2017-11-11')\r\n * @returns {string} 解析后的友好化日期格式\r\n */\r\nfunction formatDateToFriendly(date) {\r\n    if (date === void 0) { date = new Date(); }\r\n    date = BaseUtil.isNumber(date) ? new Date(date) : date;\r\n    date = date;\r\n    var now = new Date();\r\n    if ((now.getTime() - date.getTime()) < 60 * 1000) { // 1分钟以内视作“刚刚”\r\n        return '刚刚';\r\n    }\r\n    var temp = formatDate(date, 'yyyy年M月d日');\r\n    if (temp === formatDate(now, 'yyyy年M月d日')) {\r\n        return formatDate(date, 'HH:mm');\r\n    }\r\n    if (date.getFullYear() === now.getFullYear()) {\r\n        return formatDate(date, 'M月d日');\r\n    }\r\n    return temp;\r\n}\r\n/**\r\n * 获取日期对应的时间戳\r\n * @param {Date | String} date 日期对象/日期字符串\r\n * @param {String} format 字符串模板(date参数为字符串时有效)\r\n * @returns {Number} 时间戳(单位:毫秒) 如果date参数不合法，则返回-1\r\n */\r\nfunction timestamp(date, format) {\r\n    if (date === void 0) { date = new Date(); }\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    try {\r\n        date = parseDate(date, format);\r\n        return date.getTime();\r\n    }\r\n    catch (e) {\r\n        return -1;\r\n    }\r\n}\r\n/**\r\n * 计算指定日期往前推指定时间\r\n * @param {Date | string | number} date 初始日期，支持 Date 对象、日期字符串(需配合format参数)、时间戳\r\n * @param {IDateDiff} diff 日期差值，支持年、月、日、周、时、分、秒、毫秒\r\n * @param {string} format 日期格式字符串\r\n * @returns {Date} 计算后的日期\r\n *\r\n * @description 如果 diff 采用混合模式(同时包含年月日)，则会先计算最小单位。\r\n * @deprecated 比如，2015年12月30日 加上 2个月零1天，先计算最小单位会得到 2016年2月29日；先计算最大单位会得到 2016年3月1日。\r\n * @description 参考:https://www.timeanddate.com/date/dateadded.html?m1=12&d1=30&y1=2015&type=add&ay=&am=02&aw=&ad=01&rec=\r\n */\r\nfunction dateBefore(date, diff, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    if (BaseUtil.isString(date)) {\r\n        date = parseDate(date, format);\r\n    }\r\n    else if (BaseUtil.isNumber(date)) {\r\n        date = new Date(date);\r\n    }\r\n    else if (!BaseUtil.isDate(date)) {\r\n        // 如果传入的初始时间无法识别，则采用当前时间\r\n        date = new Date();\r\n    }\r\n    date = date;\r\n    return _dateDiff(date, diff, DiffDirection.Before);\r\n}\r\n/**\r\n * 计算指定日期往后推指定时间\r\n * @param {Date | string | number} date 初始日期，支持 Date 对象、日期字符串(需配合format参数)、时间戳\r\n * @param {IDateDiff} diff 日期差值，支持年、月、日、周、时、分、秒、毫秒\r\n * @param {string} format 日期格式字符串\r\n * @returns {Date} 计算后的日期\r\n */\r\nfunction dateAfter(date, diff, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    if (BaseUtil.isString(date)) {\r\n        date = parseDate(date, format);\r\n    }\r\n    else if (BaseUtil.isNumber(date)) {\r\n        date = new Date(date);\r\n    }\r\n    else if (!BaseUtil.isDate(date)) {\r\n        // 如果传入的初始时间无法识别，则采用当前时间\r\n        date = new Date();\r\n    }\r\n    date = date;\r\n    return _dateDiff(date, diff, DiffDirection.After);\r\n}\r\nvar DiffDirection;\r\n(function (DiffDirection) {\r\n    DiffDirection[DiffDirection[\"Before\"] = 0] = \"Before\";\r\n    DiffDirection[DiffDirection[\"After\"] = 1] = \"After\";\r\n})(DiffDirection || (DiffDirection = {}));\r\n/**\r\n * 内部日期计算函数\r\n * @param {Date} date 初始日期\r\n * @param {IDateDiff} diff 日期差值，支持年、月、日、周、时、分、秒、毫秒\r\n * @param {DiffDirection} direction 计算的方向\r\n */\r\nfunction _dateDiff(date, diff, direction) {\r\n    var result = new Date();\r\n    // 将天单位以下的计算出 millsecond\r\n    var ms = (diff.week || 0) * 7 * 24 * 60 * 60 * 1000 +\r\n        (diff.day || 0) * 24 * 60 * 60 * 1000 +\r\n        (diff.hour || 0) * 60 * 60 * 1000 +\r\n        (diff.minute || 0) * 60 * 1000 +\r\n        (diff.second || 0) * 1000 +\r\n        (diff.millsecond || 0);\r\n    if (direction === DiffDirection.Before) {\r\n        result.setTime(date.getTime() - ms);\r\n    }\r\n    else {\r\n        result.setTime(date.getTime() + ms);\r\n    }\r\n    // 处理 month\r\n    var n = result.getDate();\r\n    result.setDate(1);\r\n    if (direction === DiffDirection.Before) {\r\n        result.setMonth(result.getMonth() - (diff.month || 0));\r\n    }\r\n    else {\r\n        result.setMonth(result.getMonth() + (diff.month || 0));\r\n    }\r\n    result.setDate(Math.min(n, getDaysInMonth(result.getFullYear(), result.getMonth())));\r\n    // 处理 year\r\n    var m = result.getDate();\r\n    result.setDate(1);\r\n    if (direction === DiffDirection.Before) {\r\n        result.setFullYear(result.getFullYear() - (diff.year || 0));\r\n    }\r\n    else {\r\n        result.setFullYear(result.getFullYear() + (diff.year || 0));\r\n    }\r\n    result.setDate(Math.min(m, getDaysInMonth(result.getFullYear(), result.getMonth())));\r\n    return result;\r\n}\r\n/**\r\n * 判断是否为闰年\r\n * @param {Number} year 年份\r\n *\r\n * @example\r\n *   isLeapYear(1900) = false\r\n *   isLeapYear(2000) = true\r\n *   isLeapYear(2001) = false\r\n *   isLeapYear(2004) = true\r\n */\r\nfunction isLeapYear(year) {\r\n    return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));\r\n}\r\n/**\r\n * 计算在给定的年份中，给定的月份有多少天(会自动判断是否为闰年)\r\n * @param {Number} year 年份\r\n * @param {Number} month 月份 (0-11)\r\n */\r\nfunction getDaysInMonth(year, month) {\r\n    return [31, (isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\r\n}\r\nvar TimeDimension;\r\n(function (TimeDimension) {\r\n    TimeDimension[TimeDimension[\"Year\"] = 0] = \"Year\";\r\n    TimeDimension[TimeDimension[\"Month\"] = 1] = \"Month\";\r\n    TimeDimension[TimeDimension[\"Week\"] = 2] = \"Week\";\r\n    TimeDimension[TimeDimension[\"Date\"] = 3] = \"Date\";\r\n    TimeDimension[TimeDimension[\"Hour\"] = 4] = \"Hour\";\r\n    TimeDimension[TimeDimension[\"Minute\"] = 5] = \"Minute\";\r\n    TimeDimension[TimeDimension[\"Second\"] = 6] = \"Second\";\r\n})(TimeDimension || (TimeDimension = {}));\r\nfunction _parseDatePart(date) {\r\n    return {\r\n        Year: date.getFullYear(),\r\n        Month: date.getMonth(),\r\n        Date: date.getDate(),\r\n        Day: date.getDay(),\r\n        Hour: date.getHours(),\r\n        Minute: date.getMinutes(),\r\n        Second: date.getSeconds(),\r\n        Millsecond: date.getMilliseconds(),\r\n    };\r\n}\r\n/**\r\n * 获取时间的开头\r\n * @param date 日期\r\n * @param mode 时间维度 可以使用 Year Month Day Week Hour Minute Second\r\n * @param format 字符串模板\r\n */\r\nfunction getDateStart(date, mode, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    try {\r\n        date = parseDate(date, format);\r\n    }\r\n    catch (_a) {\r\n        date = new Date();\r\n    }\r\n    var parts = _parseDatePart(date);\r\n    switch (mode) {\r\n        case TimeDimension.Year:\r\n            return new Date(parts.Year, 0, 1);\r\n        case TimeDimension.Month:\r\n            return new Date(parts.Year, parts.Month, 1);\r\n        case TimeDimension.Week:\r\n            // todo: 返回周一\r\n            return new Date();\r\n        case TimeDimension.Date:\r\n            return new Date(parts.Year, parts.Month, parts.Date);\r\n        case TimeDimension.Hour:\r\n            return new Date(parts.Year, parts.Month, parts.Date, parts.Hour);\r\n        case TimeDimension.Minute:\r\n            return new Date(parts.Year, parts.Month, parts.Date, parts.Hour, parts.Minute);\r\n        case TimeDimension.Second:\r\n            return new Date(parts.Year, parts.Month, parts.Date, parts.Hour, parts.Minute, parts.Second);\r\n        default:\r\n            throw TypeError('mode is invalid');\r\n    }\r\n}\r\n/**\r\n * 获取时间的结尾\r\n * @param date 日期\r\n * @param mode 时间维度 可以使用 Year Month Date Week Hour Minute Second\r\n * @param format 字符串模板\r\n */\r\nfunction getDateEnd(date, mode, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    try {\r\n        date = parseDate(date, format);\r\n    }\r\n    catch (_a) {\r\n        date = new Date();\r\n    }\r\n    var parts = _parseDatePart(date);\r\n    switch (mode) {\r\n        case TimeDimension.Year:\r\n            return dateBefore(new Date(parts.Year + 1, 0, 1), { millsecond: 1 });\r\n        case TimeDimension.Month:\r\n            return new Date(parts.Year, parts.Month, getDaysInMonth(parts.Year, parts.Month), 23, 59, 59, 999);\r\n        case TimeDimension.Week:\r\n            // todo: 返回周日\r\n            return new Date();\r\n        case TimeDimension.Date:\r\n            return new Date(parts.Year, parts.Month, parts.Date, 23, 59, 59, 999);\r\n        case TimeDimension.Hour:\r\n            return new Date(parts.Year, parts.Month, parts.Date, parts.Hour, 59, 59, 999);\r\n        case TimeDimension.Minute:\r\n            return new Date(parts.Year, parts.Month, parts.Date, parts.Hour, parts.Minute, 59, 999);\r\n        case TimeDimension.Second:\r\n            return new Date(parts.Year, parts.Month, parts.Date, parts.Hour, parts.Minute, parts.Second, 999);\r\n        default:\r\n            throw TypeError('mode is invalid');\r\n    }\r\n}\r\n/**\r\n * 获取给定日期所在当年有多少天\r\n * @param {Date | String | Number} date 日期\r\n * @param {String} format 字符串模板\r\n *\r\n * @example\r\n *  getDayOfYear('2018-11-26') => 365\r\n *  getDayOfYear('12/20/2019', 'MM/dd/yyyy') => 365\r\n *  getDayOfYear('2020-12-20') => 366\r\n */\r\nfunction getDayCountOfYear(date, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    try {\r\n        date = parseDate(date);\r\n    }\r\n    catch (_a) {\r\n        date = new Date();\r\n    }\r\n    return isLeapYear(date.getFullYear()) ? 366 : 365;\r\n}\r\n/**\r\n * 获取给定日期在当年的第几天\r\n * @param {Date | String | Number} date 日期\r\n * @param {String} format 字符串模板\r\n *\r\n * @example\r\n *  getDayIndexOfYear('2017-01-20') => 20\r\n *  getDayIndexOfYear('2018-05-20') => 140\r\n */\r\nfunction getDayIndexOfYear(date, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    try {\r\n        date = parseDate(date);\r\n    }\r\n    catch (_a) {\r\n        date = new Date();\r\n    }\r\n    var init = getDateStart(date, TimeDimension.Year);\r\n    return Math.floor((date.getTime() - init.getTime()) / (24 * 60 * 60 * 1000)) + 1;\r\n}\r\n/**\r\n * 获取给定日期在当年的第几周\r\n * @param {Date | String | Number} date 日期\r\n * @param {String} format 字符串模板\r\n *\r\n * @example\r\n *  getWeekIndexOfYear('2017-01-20') => 3\r\n *  getWeekIndexOfYear('2018-05-20') => 20\r\n */\r\nfunction getWeekIndexOfYear(date, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    try {\r\n        date = parseDate(date);\r\n    }\r\n    catch (_a) {\r\n        date = new Date();\r\n    }\r\n    var init = getDateStart(date, TimeDimension.Year);\r\n    return Math.floor((date.getTime() - init.getTime()) / (7 * 24 * 60 * 60 * 1000)) + 1;\r\n}\r\n/**\r\n * 获取给定日期在当月的第几周\r\n * @param {Date | String | Number} date 日期\r\n * @param {String} format 字符串模板\r\n *\r\n * @example\r\n *  getWeekIndexOfMonth('2017-01-20') => 3\r\n *  getWeekIndexOfMonth('2018-05-20') => 2\r\n */\r\nfunction getWeekIndexOfMonth(date, format) {\r\n    if (format === void 0) { format = 'yyyy-MM-dd'; }\r\n    try {\r\n        date = parseDate(date);\r\n    }\r\n    catch (_a) {\r\n        date = new Date();\r\n    }\r\n    var init = getDateStart(date, TimeDimension.Month);\r\n    return Math.floor((date.getTime() - init.getTime()) / (7 * 24 * 60 * 60 * 1000)) + 1;\r\n}\r\n/**\r\n * 计算两个日期的差\r\n * @param date1 日期1\r\n * @param date2 日期2\r\n * @param format1 日期1如果是字符串，该参数用于指定字符串模板\r\n * @param format2 日期2如果是字符串，该参数用于指定字符串模板\r\n */\r\nfunction getDateDiff(date1, date2, format1, format2) {\r\n    if (format1 === void 0) { format1 = 'yyyy-MM-dd'; }\r\n    if (format2 === void 0) { format2 = 'yyyy-MM-dd'; }\r\n    // 如果第一个参数不是字符串，而第二个参数是字符串，则只需要传入一个format即可\r\n    if (!BaseUtil.isString(date1) && BaseUtil.isString(date2)) {\r\n        format2 = format1;\r\n    }\r\n    try {\r\n        date1 = parseDate(date1, format1);\r\n    }\r\n    catch (_a) {\r\n        date1 = new Date();\r\n    }\r\n    try {\r\n        date2 = parseDate(date2, format2);\r\n    }\r\n    catch (_b) {\r\n        date2 = new Date();\r\n    }\r\n    var timestampDiff = date2.getTime() - date1.getTime();\r\n    var day = Math.floor(timestampDiff / (24 * 60 * 60 * 1000));\r\n    var hour = Math.floor(timestampDiff % (24 * 60 * 60 * 1000) / (60 * 60 * 1000));\r\n    var minute = Math.floor((timestampDiff - day * 24 * 60 * 60 * 1000 - hour * 60 * 60 * 1000) / (60 * 1000));\r\n    var second = Math.floor((timestampDiff - day * 24 * 60 * 60 * 1000 - hour * 60 * 60 * 1000 -\r\n        minute * 60 * 1000) / 1000);\r\n    var ms = timestampDiff - day * 24 * 60 * 60 * 1000 - hour * 60 * 60 * 1000 - minute * 60 * 1000 - second * 1000;\r\n    return {\r\n        Day: day,\r\n        Hour: hour,\r\n        Minute: minute,\r\n        Second: second,\r\n        Millsecond: ms,\r\n    };\r\n}\r\nvar DateUtil = {\r\n    parseDate: parseDate,\r\n    formatDate: formatDate,\r\n    formatDateToFriendly: formatDateToFriendly,\r\n    timestamp: timestamp,\r\n    dateBefore: dateBefore,\r\n    dateAfter: dateAfter,\r\n    isLeapYear: isLeapYear,\r\n    getDaysInMonth: getDaysInMonth,\r\n    getDateStart: getDateStart,\r\n    getDateEnd: getDateEnd,\r\n    getDayCountOfYear: getDayCountOfYear,\r\n    getDayIndexOfYear: getDayIndexOfYear,\r\n    getWeekIndexOfYear: getWeekIndexOfYear,\r\n    getWeekIndexOfMonth: getWeekIndexOfMonth,\r\n    getDateDiff: getDateDiff,\r\n};\n\n/**\r\n * 字符串工具类\r\n * @Author LvXiaoMeng\r\n */\r\n/**\r\n * 判断字符串是否为空\r\n * @param {String} input 输入字符串，如'我是测试的字符串'\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  isEmpty('我是测试的字符串'); // false\r\n *  isEmpty(''); // true\r\n */\r\nfunction isEmpty$1(input) {\r\n    return input === null || input === '' || /^\\s*$/.test(input);\r\n}\r\n/**\r\n * 判断字符串是否不为空\r\n * @param {String} input 输入字符串，如'我是测试的字符串'\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  isNotEmpty('我是测试的字符串'); // true\r\n *  isNotEmpty(''); // false\r\n */\r\nfunction isNotEmpty(input) {\r\n    return !this.isEmpty(input);\r\n}\r\n/**\r\n * 将字符串去除空格\r\n * @param {string} input 输入字符串，如'我是测 试的字符串'\r\n * @returns {string} 去除空格后的字符串\r\n *\r\n * @example\r\n *  trim(' 测试字符串 '); // 测试字符串\r\n *  trim('我是测 试的字符串'); // 我是测试的字符串\r\n */\r\nfunction trim(input) {\r\n    return input.replace(/\\s+/g, '');\r\n}\r\n/**\r\n * 判断字符串是否以某个字符串开头\r\n * @param {string} input 输入字符串，如' abcdefg'\r\n * @param {string} prefix 输入字符串，如'ab'\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  startsWith('abcdefg','ab'); // true\r\n *  startsWith('abcdefg','bc'); // false\r\n *  startsWith('abcdefg','a'); // true\r\n */\r\nfunction startsWith(input, prefix) {\r\n    return input.indexOf(prefix) === 0;\r\n}\r\n/**\r\n * 判断字符串是否以某个字符串结束\r\n * @param {String} input 输入字符串，如' abcdefg '\r\n * @param {string} suffix 输入字符串，如'fg'\r\n * @returns {boolean} 是/否\r\n *\r\n * @examplec\r\n *  endsWith('abcdefg', 'fg'); // true\r\n *  endsWith('abcdefg', 'ef'); // false\r\n *  endsWith('abcdefg', 'g'); // true\r\n */\r\nfunction endsWith(input, suffix) {\r\n    return input.endsWith(suffix);\r\n    // return input.lastIndexOf(suffix) === (input.length - suffix.length);\r\n}\r\n/**\r\n * 判断字符串是否包含某个字符串\r\n * @param {String} input 输入字符串，如'abcdefg'\r\n * @param {string} searchSeq 输入字符串，如'abc'\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  contains('abcdefg', 'abc'); // true\r\n *  contains('abcdefg', 'gh'); // false\r\n *  contains('abcdefg', 'a'); // true\r\n */\r\nfunction contains(input, searchSeq) {\r\n    return input.indexOf(searchSeq) >= 0;\r\n}\r\n/**\r\n * 判断两个字符串是否相等\r\n * @param {string|number} input1 输入字符串，如'我是测试的字符串' 或 输入数字如 220022\r\n * @param {String|number} input2 输入字符串，如'我是测试的字符串' 或 输入数字如 220022\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  equals(220022, 220022); // true\r\n *  equals('我是测试的 字符串  ', '我是测试的字符串'); // false\r\n *  equals('我不是测试的字符串 ', '我是测试的字符串'); // false\r\n */\r\nfunction equals(input1, input2) {\r\n    return input1 === input2;\r\n}\r\n/**\r\n * 忽略大小写判断两个字符串是否相等\r\n * @param {String} input1 输入字符串，如'equalsIgnoreCasE',\r\n * @param {String} input2 输入字符串，如'equalsIgnoreCase'\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  equalsIgnoreCase('equalsIgnoreCasE', 'equalsIgnoreCase'); // true\r\n *  equalsIgnoreCase('equals ', 'equalsIgnoreCase'); // false\r\n */\r\nfunction equalsIgnoreCase(input1, input2) {\r\n    return input2.toLocaleLowerCase() === input1.toLocaleLowerCase();\r\n}\r\n/**\r\n * 判断字符串是否含有空格\r\n * @param {String} input 输入字符串，如'我是 测试 的 字符串'\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  containsWhitespace('我是 测试 的 字符串  '); // true\r\n *  containsWhitespace('我是测试的字符串'); // false\r\n *  containsWhitespace('  我是测试的字符串  '); // true\r\n */\r\nfunction containsWhitespace(input) {\r\n    var reg = /\\s/;\r\n    return reg.test(input);\r\n}\r\n/**\r\n * 按指定数量生成给定字符串字符\r\n * @param {string|number} ch 输入字符串,如'我是测试的字符串', 或 输入数字如 220022\r\n * @param {number} repeatTimes 输入数字,如 '6'\r\n * @returns {string} 指定数量的给定字符串\r\n *\r\n * @example\r\n *  repeat('AB ',6); // 'AB AB AB AB AB AB '\r\n *  repeat('C  D',3); //'C  DC  DC  D'\r\n *  repeat('20', 3); //'202020'\r\n */\r\nfunction repeat(ch, repeatTimes) {\r\n    var result = '';\r\n    for (var i = 0; i < repeatTimes; i++) {\r\n        result += ch;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * 去除字符串中的空格\r\n * @param {string} input 输入字符串,如'我是 测试 的 字符串  '\r\n * @returns {string} 去除空格后的字符串\r\n *\r\n * @example\r\n *  deleteWhitespace('我是 测试 的 字符串  '); // '我是测试的字符串'\r\n *  deleteWhitespace(''); //''\r\n */\r\nfunction deleteWhitespace(input) {\r\n    return input.replace(/\\s+/g, '');\r\n}\r\n/**\r\n * 将给定字符串进行右侧填充\r\n * @param {string|number} input 输入字符串, 如'我是测试的字符串', 或 输入数字如 2222\r\n * @param {number} size 输入数字,如 2\r\n * @param {string|number } padStr 输入填充字符, 如 '--' 或 输入数字如 33\r\n * @returns {string} 右侧填充后的字符串\r\n *\r\n * @example\r\n *  rightPad(2222, 1, 33); // '222233'\r\n *  rightPad('我是测试的字符串', 2, '--'); //'----我是测试的字符串'\r\n */\r\nfunction rightPad(input, size, padStr) {\r\n    return input + this.repeat(padStr, size);\r\n}\r\n/**\r\n * 将给定字符进行左侧填充\r\n * @param {string|number} input 输入字符串,如'我是测试的字符串' 或 输入数字如 220022\r\n * @param {number} size 输入数字,如 2\r\n * @param {string|number} padStr 输入填充字符,如 '--'输入数字如 220022\r\n * @returns {string} 左侧填充后的字符串\r\n *\r\n * @example\r\n *  leftPad('我是测试的字符串', 2, '--'); // '----我是测试的字符串'\r\n *  leftPad(2222, 2, 3); //'332222'\r\n */\r\nfunction leftPad(input, size, padStr) {\r\n    return this.repeat(padStr, size) + input;\r\n}\r\n/**\r\n * 将字符串首字母转大写\r\n * @param {string}  input 输入字符串,如'admin'\r\n * @returns {string} 首字母转大写后的字符串\r\n *\r\n * @example\r\n *  capitalize('admin'); // 'Admin'\r\n *  capitalize('capitalize'); // 'Capitalize'\r\n */\r\nfunction capitalize(input) {\r\n    input = input.replace(input[0], input[0].toUpperCase());\r\n    return input;\r\n}\r\n/**\r\n * 将字符串首字母转小写\r\n * @param {string}  input 输入字符串,如'Capitalize',\r\n * @returns {string} 首字母转小写后的字符串\r\n *\r\n * @example\r\n * unCapitalize('Capitalize'); // 'capitalize'\r\n * unCapitalize('SetTimeout'); // 'setTimeout'\r\n */\r\nfunction unCapitalize(input) {\r\n    input = input.replace(input[0], input[0].toLowerCase());\r\n    return input;\r\n}\r\n/**\r\n * 将字符串中的字母大写转小写，小写转大写\r\n * @param {string}  input 输入字符串,如'abcde',\r\n * @returns {string} 大写转小写，小写转大写后的字符串\r\n *\r\n * @example\r\n *  swapCase('aBcde'); // 'AbCDE'\r\n *  swapCase('ABCDe'); // 'abcdE'\r\n */\r\nfunction swapCase(input) {\r\n    return input.replace(/[a-z]/ig, function (matchStr) {\r\n        if (matchStr >= 'A' && matchStr <= 'Z') {\r\n            return matchStr.toLocaleLowerCase();\r\n        }\r\n        else if (matchStr >= 'a' && matchStr <= 'z') {\r\n            return matchStr.toLocaleUpperCase();\r\n        }\r\n    });\r\n}\r\n/**\r\n * 统计含有的子字符串的个数\r\n * @param {string} input 输入字符串,如'abcdeabcdeabcde',\r\n * @param {string} sub 输入字符串,如'ab',\r\n * @returns {number} 统计后字符串的个数\r\n *\r\n * @example\r\n *  countMatches('dabddadb', 'da'); // 3\r\n *  countMatches('abcdeabcdeabcde','ab'); // 6\r\n */\r\nfunction countMatches(input, sub) {\r\n    if (this.isEmpty(input) || this.isEmpty(sub)) {\r\n        return 0;\r\n    }\r\n    var count = 0;\r\n    var index = 0;\r\n    while ((input.indexOf(sub, index)) !== -1) {\r\n        index = input.indexOf(sub, index) + sub.length;\r\n        count++;\r\n    }\r\n    return count;\r\n}\r\n/**\r\n * 判断字符串是否为字母\r\n * @param {string} input 输入字符串,如'abcdeabcdeabcde',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isAlpha('abce测试'); // false\r\n *  isAlpha('abcdeabcdeabcde'); // true\r\n */\r\nfunction isAlpha(input) {\r\n    // @ts-ignore\r\n    return /^[a-z]+$/i.test(input);\r\n}\r\n/**\r\n * 判断字符串是否为字母、空格\r\n * @param {string}  input 输入字符串, 如'abcd eabc deab cde',\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  isAlphaSpace(' abc 测试 '); // false\r\n *  isAlphaSpace('abcd eabc deab cde'); // true\r\n */\r\nfunction isAlphaSpace(input) {\r\n    // @ts-ignore\r\n    return /^[a-z\\s]*$/i.test(input);\r\n}\r\n/**\r\n * 判断字符串是否为字母、数字\r\n * @param {string} input 输入字符串,如'22abcdeabcdeabcde22',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isAlphanumeric('abcd串abcd'); // false\r\n *  isAlphanumeric('22abcdeabcdeabcde22'); // true\r\n */\r\nfunction isAlphanumeric(input) {\r\n    // @ts-ignore\r\n    return /^[a-z0-9]+$/i.test(input);\r\n}\r\n/**\r\n * 判断字符串是否为字母、数字和空格\r\n * @param {string}  input 输入字符串, 如'22abcde abcde abcde 22',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isAlphanumericSpace('我是测试的 222字符串'); // false\r\n *  isAlphanumericSpace('22abcde abcde abcde 22'); // true\r\n */\r\nfunction isAlphanumericSpace(input) {\r\n    // @ts-ignore\r\n    return /^[a-z0-9\\s]*$/i.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为数字\r\n * @param {string}  input 输入数字,如'220022',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isNumeric('我是测试的 字符串'); // false\r\n *  isNumeric(220022); // true\r\n */\r\nfunction isNumeric(input) {\r\n    return /^(?:[1-9]\\d*|0)(?:\\.\\d+)?$/.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为小数\r\n * @param {string}  input 输入数字,如22.0022,\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isDecimal('220022'); // false\r\n *  isDecimal(22.0022); // true\r\n */\r\nfunction isDecimal(input) {\r\n    return /^[-+]?(?:0|[1-9]\\d*)\\.\\d+$/.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为负小数\r\n * @param {number}  input 输入数字,如'-22.0022',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isNegativeDecimal('22.0022'); // false\r\n *  isNegativeDecimal('-22.0022'); // true\r\n */\r\nfunction isNegativeDecimal(input) {\r\n    return /^\\-?(?:0|[1-9]\\d*)\\.\\d+$/.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为正小数\r\n * @param {string}  input 输入数字, 如 '22.0022',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isPositiveDecimal('22.0022'); // true\r\n *  isPositiveDecimal('-22.0022'); // false\r\n */\r\nfunction isPositiveDecimal(input) {\r\n    return /^\\+?(?:0|[1-9]\\d*)\\.\\d+$/.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为整数\r\n * @param {string}  input 输入数字,如'-220022',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isInteger('-220022'); // true\r\n *  isInteger('22.0022'); // false\r\n */\r\nfunction isInteger(input) {\r\n    return /^[-+]?(?:0|[1-9]\\d*)$/.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为正整数\r\n * @param {string}  input 输入数字,如'220022',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isPositiveInteger('220022'); // true\r\n *  isPositiveInteger('-22.22'); // false\r\n */\r\nfunction isPositiveInteger(input) {\r\n    return /^\\+?(?:0|[1-9]\\d*)$/.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为负整数\r\n * @param {string}  input 输入数字,如'-220022',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isNegativeInteger('-220022'); // true\r\n *  isNegativeInteger('22.22'); // false\r\n */\r\nfunction isNegativeInteger(input) {\r\n    return /^\\-?(?:0|[1-9]\\d*)$/.test(input);\r\n}\r\n/**\r\n *  判断字符串是否为数字、空格\r\n * @param {string}  input 输入字符串, 如'2 2 0 0 2 2',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isNumericSpace('2 2 0 0 2 2'); // true\r\n *  isNumericSpace('2222aa'); // false\r\n */\r\nfunction isNumericSpace(input) {\r\n    return /^[\\d\\s]*$/.test(input);\r\n}\r\n/**\r\n *   判断字符串是否为空格\r\n * @param {string}  input 输入字符串,如' ',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isWhitespace(' '); // true\r\n *  isWhitespace('22.22'); //false\r\n */\r\nfunction isWhitespace(input) {\r\n    return /^\\s*$/.test(input);\r\n}\r\n/**\r\n *   判断字符串是否为小写字母\r\n * @param {string}  input 输入字符串, 如'abcdefg ',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isAllLowerCase('abcdefg'); // true\r\n *  isAllLowerCase('isAllLowerCase'); // false\r\n */\r\nfunction isAllLowerCase(input) {\r\n    return /^[a-z]+$/.test(input);\r\n}\r\n/**\r\n *   判断字符串是否为大写字母\r\n * @param {string}  input 输入字符串,如'ABCDEFG ',\r\n * @returns  {boolean} 是/否\r\n *\r\n * @example\r\n *  isAllUpperCase('ABCDEFG'); // true\r\n *  isAllUpperCase('isAllLowerCase'); // false\r\n */\r\nfunction isAllUpperCase(input) {\r\n    return /^[A-Z]+$/.test(input);\r\n}\r\n/**\r\n *  如果字符串为空则使用默认字符串, 否则不变\r\n * @param {string}  input 输入字符串, 如'',\r\n * @param {string}  defaultStr 输入字符串, 如'我是测试的字符串',\r\n * @returns  {string} 字符串为空则使用默认字符串, 否则不变\r\n *\r\n * @example\r\n *  defaultIfEmpty('', 'abcd'); // 'abcd'\r\n *  defaultIfEmpty('我是测试的字符串isAllLowerCase', '我是测试的字符串'); // '我是测试的字符串isAllLowerCase'\r\n */\r\nfunction defaultIfEmpty(input, defaultStr) {\r\n    return this.isEmpty(input) ? defaultStr : input;\r\n}\r\n/**\r\n * 字符串反转\r\n * @param {string}  input 输入字符串,如'abcd',\r\n * @returns {string} 反转后的字符串\r\n *\r\n * @example\r\n *  reverse('abcd'); // 'dcba'\r\n *  reverse('ABCD'); // 'DCBA'\r\n */\r\nfunction reverse(input) {\r\n    if (this.isEmpty(input)) {\r\n        return '';\r\n    }\r\n    return input.split('').reverse().join('');\r\n}\r\n/**\r\n *  删掉特殊字符(英文状态下)\r\n * @param {string}  input 输入字符串,如''remove SpecialCharacter$%%^'',\r\n * @returns {string}  删掉特殊字符(英文状态下)后的字符串\r\n *\r\n * @example\r\n *  removeSpecialCharacter('remove SpecialCharacter$%%^'); // 'remove SpecialCharacter'\r\n *  removeSpecialCharacter('removeSpecialCharacter##*'); // 'removeSpecialCharacter'\r\n */\r\nfunction removeSpecialCharacter(input) {\r\n    return input.replace(/[!-/:-@\\[-`{-~]/g, '');\r\n}\r\n/**\r\n * 只包含特殊字符、数字和字母（不包括空格，若想包括空格，改为[ -~]）\r\n * @param {string} input 输入字符串, 如'2222SpecialCharacter$%%^',\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  isSpecialCharacterAlphanumeric('2222SpecialCharacter$%%^'); // true\r\n *  isSpecialCharacterAlphanumeric('(字符串2222SpecialCharacter$%%^)'); // false\r\n */\r\nfunction isSpecialCharacterAlphanumeric(input) {\r\n    return /^[!-~]+$/.test(input);\r\n}\r\n/**\r\n * 消息格式化\r\n * @param {string}  message  字符串模板,如'format {0}',\r\n * @param {any[]}  arr  模板数据,如['data'],\r\n * @returns {string} 消息格式化后的字符串\r\n *\r\n * @example\r\n *  format('format {0}', ['123']); // 'format 123'\r\n *  format('format {0} {1}', ['123']); // 'format 123 undefined'\r\n */\r\nfunction format(message, arr) {\r\n    return message.replace(/{(\\d+)}/g, function (matchStr, group1) {\r\n        return arr[group1];\r\n    });\r\n}\r\n/**\r\n * 中文校验\r\n * @param {string}  input 输入字符串,如'我是测试的字符串',\r\n * @returns {boolean} 是/否\r\n *\r\n * @example\r\n *  isChinese('我是测试的字符串'); // true\r\n *  isChinese('我是测试的字  abc  符串'); // false\r\n */\r\nfunction isChinese(input) {\r\n    return /^[\\u4E00-\\u9FA5]+$/.test(input);\r\n}\r\n/**\r\n * 去掉中文字符\r\n * @param {string}  input  输入字符串,如'我是测试的字  abc  符串',\r\n * @returns {string} 去掉中文字符后的字符串\r\n *\r\n * @example\r\n *  removeChinese('我是测试的字  abc  符串'); // abc\r\n *  removeChinese('测试abcd'); // abc\r\n */\r\nfunction removeChinese(input) {\r\n    return input.replace(/[\\u4E00-\\u9FA5]+/gm, '');\r\n}\r\n/**\r\n * 转义元字符\r\n * @param {string}  input 输入字符串, 如'\\n\\\\?',\r\n * @returns {string} 转义后的字符\r\n *\r\n * @example\r\n *  escapeMetacharacter('\\'\\''); // '\\'\\''\r\n *  escapeMetacharacter('\\n\\\\?'); // '\\n\\\\?'\r\n */\r\nfunction escapeMetacharacter(input) {\r\n    var metacharacter = '^$()*+.[]|\\\\-?{}|';\r\n    if (metacharacter.indexOf(input) >= 0) {\r\n        input = '\\\\' + input;\r\n    }\r\n    return input;\r\n}\r\n/**\r\n * 转义字符串中的元字符\r\n * @param {string}  input  输入字符串,如'我是测试的字abc符串',\r\n * @returns {string} 转义后的字符串\r\n *\r\n * @example\r\n *  escapeMetacharacterOfStr('\\'\\''); // '\\'\\''\r\n *  escapeMetacharacterOfStr('我是测试的字abc\\n符串'); // '我是测试的字abc\\n符串'\r\n */\r\nfunction escapeMetacharacterOfStr(input) {\r\n    return input.replace(/[\\^\\$\\(\\)\\*\\+\\.\\[\\]\\|\\\\\\-?\\{\\}\\|]/gm, '\\\\$&');\r\n}\r\n/**\r\n * 将中划线分隔形式的字符串转换为驼峰式的字符串\r\n * @param {string}  input  输入字符串,如'last-index-of',\r\n * @returns {string} 连字符转换成驼峰式后的字符串\r\n *\r\n * @example\r\n *  camelize('last-index-of'); // 'lastIndexOf'\r\n *  camelize('escape-metacharacter-of-str'); // 'escapeMetacharacterOfStr'\r\n */\r\nfunction camelize(input) {\r\n    return (input + '').replace(/-\\D/g, function (match) {\r\n        return match.charAt(1).toUpperCase();\r\n    });\r\n}\r\n/**\r\n * 驼峰转连字符\r\n * 将驼峰式的字符串转换为中划线分隔形式的字符串\r\n * @param {string}  input  输入字符串,如'lastIndexOf',\r\n * @returns {string} 驼峰转连字符后的字符串\r\n *\r\n * @example\r\n *  hyphenate('lastIndexOf'); // 'last-index-of'\r\n *  hyphenate('escapeMetacharacterOfStr'); // 'escape-metacharacter-of-str'\r\n */\r\nfunction hyphenate(input) {\r\n    return (input + '').replace(/[A-Z]/g, function (match) {\r\n        return '-' + match.toLowerCase();\r\n    });\r\n}\r\nvar StringUtil = {\r\n    isEmpty: isEmpty$1,\r\n    isNotEmpty: isNotEmpty,\r\n    trim: trim,\r\n    startsWith: startsWith,\r\n    endsWith: endsWith,\r\n    contains: contains,\r\n    equals: equals,\r\n    equalsIgnoreCase: equalsIgnoreCase,\r\n    containsWhitespace: containsWhitespace,\r\n    repeat: repeat,\r\n    deleteWhitespace: deleteWhitespace,\r\n    rightPad: rightPad,\r\n    leftPad: leftPad,\r\n    capitalize: capitalize,\r\n    unCapitalize: unCapitalize,\r\n    swapCase: swapCase,\r\n    countMatches: countMatches,\r\n    isAlpha: isAlpha,\r\n    isAlphaSpace: isAlphaSpace,\r\n    isAlphanumeric: isAlphanumeric,\r\n    isAlphanumericSpace: isAlphanumericSpace,\r\n    isNumeric: isNumeric,\r\n    isDecimal: isDecimal,\r\n    isNegativeDecimal: isNegativeDecimal,\r\n    isPositiveDecimal: isPositiveDecimal,\r\n    isInteger: isInteger,\r\n    isPositiveInteger: isPositiveInteger,\r\n    isNegativeInteger: isNegativeInteger,\r\n    isNumericSpace: isNumericSpace,\r\n    isWhitespace: isWhitespace,\r\n    isAllLowerCase: isAllLowerCase,\r\n    isAllUpperCase: isAllUpperCase,\r\n    defaultIfEmpty: defaultIfEmpty,\r\n    reverse: reverse,\r\n    removeSpecialCharacter: removeSpecialCharacter,\r\n    isSpecialCharacterAlphanumeric: isSpecialCharacterAlphanumeric,\r\n    format: format,\r\n    isChinese: isChinese,\r\n    removeChinese: removeChinese,\r\n    escapeMetacharacter: escapeMetacharacter,\r\n    escapeMetacharacterOfStr: escapeMetacharacterOfStr,\r\n    camelize: camelize,\r\n    hyphenate: hyphenate,\r\n};\n\n/**\r\n * 判断是否为整数\r\n * @param {Number} num 数字\r\n */\r\nfunction isInteger$1(num) {\r\n    return BaseUtil.isNumber(num) && isFinite(num) && Math.floor(num) === num;\r\n}\r\n/**\r\n * 判断是否为小数\r\n * @param {Number} num 数字\r\n */\r\nfunction isFloat(num) {\r\n    return BaseUtil.isNumber(num) && isFinite(num) && Math.floor(num) !== num;\r\n}\r\n/**\r\n * 判断是否是 NaN\r\n * @param num 数字\r\n */\r\nfunction isaNaN(num) {\r\n    return BaseUtil.isNumber(num) && isNaN(num);\r\n}\r\n/**\r\n * 判断是否是有理数\r\n * @param num 数字\r\n */\r\nfunction isaFinite(num) {\r\n    return BaseUtil.isNumber(num) && isFinite(num);\r\n}\r\n/**\r\n * 转为数字\r\n * @param value 要转成数字的值\r\n */\r\nfunction toNumber(value) {\r\n    return Number(value);\r\n}\r\n/**\r\n * 转为有理数\r\n * @param value 要转换的值\r\n *\r\n * @example\r\n *   toFinite(3.2) => 3.2\r\n *   toFinite(Number.MIN_VALUE) => 5e-324\r\n *   toFinite(Infinity) => 1.7976e+308\r\n *   toFinite('3.2') => 3.2\r\n */\r\nfunction toFinite(value) {\r\n    if (!value) {\r\n        return 0;\r\n    }\r\n    value = toNumber(value);\r\n    if (value === Infinity || value === -Infinity) {\r\n        var sign = (value < 0 ? -1 : 1);\r\n        return sign * Number.MAX_SAFE_INTEGER;\r\n    }\r\n    return value === value ? value : 0;\r\n}\r\n/**\r\n * 检查数字是否在指定区间内\r\n * @param num 要检测的数字\r\n * @param start 区间的开始，默认值为0\r\n * @param end 区间的结束(区间不包含此边界值)\r\n */\r\nfunction inRange(num, start, end) {\r\n    start = toFinite(start);\r\n    if (end === undefined) {\r\n        end = start;\r\n        start = 0;\r\n    }\r\n    else {\r\n        end = toFinite(end);\r\n    }\r\n    num = toNumber(num);\r\n    return baseInRange(num, start, end);\r\n}\r\nfunction baseInRange(num, start, end) {\r\n    return num >= Math.min(start, end) && num < Math.max(start, end);\r\n}\r\n/**\r\n * 生成随机数，支持随机整数和随机小数\r\n * @param {Number} lower 下边界，默认0\r\n * @param {Number} upper 上边界，默认1\r\n * @param {Boolean} floating 随机小数的位数，默认为0，即随机整数\r\n *\r\n * @example\r\n *   random(0, 5) => an integer between 0 and 5\r\n *   random(5)     => also random(0, 5)\r\n *   random(1.2, 5.2, 1) => a floating-point number between 1.2 and 5.2\r\n */\r\nfunction random(lower, upper, floating) {\r\n    if (floating === void 0) { floating = 0; }\r\n    // 参数调整\r\n    if (lower === undefined && upper === undefined) {\r\n        lower = 0;\r\n        upper = 1;\r\n    }\r\n    else {\r\n        lower = toFinite(lower);\r\n        if (upper === undefined) {\r\n            upper = lower;\r\n            lower = 0;\r\n        }\r\n        else {\r\n            upper = toFinite(upper);\r\n        }\r\n    }\r\n    if (lower > upper) {\r\n        var temp = lower;\r\n        lower = upper;\r\n        upper = temp;\r\n    }\r\n    var rand = Math.random();\r\n    if (floating || lower % 1 || upper % 1) {\r\n        // 浮点数\r\n        var t = lower + (rand * (upper - lower + parseFloat('1e-' + ((rand + '').length - 1))));\r\n        return toNumber(Math.min(t, upper).toFixed(floating));\r\n    }\r\n    else {\r\n        // 整数\r\n        return lower + Math.floor(rand * (upper - lower + 1));\r\n    }\r\n}\r\nvar NumberUtil = {\r\n    isInteger: isInteger$1,\r\n    isFloat: isFloat,\r\n    isaNaN: isaNaN,\r\n    isaFinite: isaFinite,\r\n    inRange: inRange,\r\n    random: random,\r\n};\n\n/**\r\n * 检查手机号是否合法\r\n * @param {String} phone 手机号\r\n *\r\n * @example\r\n *   phoneIsValid(null)\r\n *   // => false\r\n *   phoneIsValid('123')\r\n *   // => false\r\n *   phoneIsValid('12345678901')\r\n *   // => true\r\n */\r\nfunction phoneIsValid(phone) {\r\n    if (!BaseUtil.isString(phone) || phone.length !== 11) {\r\n        return false;\r\n    }\r\n    return /^1[2-9]\\d{9}$/.test(phone);\r\n}\r\n/**\r\n * 检查身份证是否合法\r\n * @param {String} idcard 身份证\r\n *\r\n * @example\r\n *   idcardIsValid('110410199001011234')\r\n *   // => false\r\n *   idcardIsValid('410482199001080000')\r\n *   // => true\r\n */\r\nfunction idcardIsValid(idcard) {\r\n    var weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]; // 十七位数字本体码权重\r\n    var validate = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']; // 校验码列表\r\n    if (!BaseUtil.isString(idcard) || idcard.length !== 18) {\r\n        return false;\r\n    }\r\n    var idcardCharArr = idcard.split('');\r\n    var sum = 0;\r\n    for (var i = 0; i < 17; i++) {\r\n        sum += (+idcardCharArr[i]) * weight[i];\r\n    }\r\n    var mode = sum % 11;\r\n    return validate[mode] === idcardCharArr[17].toUpperCase();\r\n}\r\n/**\r\n * 对手机号进行去敏处理，用*替换\r\n * @param phone 手机号\r\n * @param start 掩码开始位置，从0开始\r\n * @param len 掩码长度\r\n *\r\n * @example\r\n *   maskPhone('13641601234')\r\n *   // => '136****1234'\r\n *   maskPhone('1234')\r\n *   // => '1234'\r\n *   maskPhone('13641601234', 3, 8)\r\n *   // => '136********'\r\n */\r\nfunction maskPhone(phone, start, len) {\r\n    if (start === void 0) { start = 3; }\r\n    if (len === void 0) { len = 4; }\r\n    if (!phoneIsValid(phone)) {\r\n        return phone;\r\n    }\r\n    if (start < 0) {\r\n        start = 0;\r\n    }\r\n    if (start > 11) {\r\n        start = 11;\r\n    }\r\n    if (len < 0) {\r\n        len = 0;\r\n    }\r\n    if (len > 11) {\r\n        len = 11;\r\n    }\r\n    if (start + len > 11) {\r\n        len = 11 - start;\r\n    }\r\n    return phone.substr(0, start) + '*'.repeat(len) + phone.substring(start + len);\r\n}\r\n/**\r\n * 对身份证进行去敏处理，用*替换\r\n * @param idcard 身份证\r\n * @param start 掩码开始位置，从0开始\r\n * @param len  掩码长度\r\n *\r\n * @example\r\n *   maskIDCard('110410199001011234')\r\n *   // => '110410********1234'\r\n *   maskIDCard('110410199001011234', 6, 10)\r\n *   // => '110410**********34'\r\n */\r\nfunction maskIDCard(idcard, start, len) {\r\n    if (start === void 0) { start = 6; }\r\n    if (len === void 0) { len = 8; }\r\n    if (!idcardIsValid(idcard)) {\r\n        return idcard;\r\n    }\r\n    if (start < 0) {\r\n        start = 0;\r\n    }\r\n    if (start > 18) {\r\n        start = 18;\r\n    }\r\n    if (len < 0) {\r\n        len = 0;\r\n    }\r\n    if (len > 18) {\r\n        len = 18;\r\n    }\r\n    if (start + len > 18) {\r\n        len = 18 - start;\r\n    }\r\n    return idcard.substr(0, start) + '*'.repeat(len) + idcard.substring(start + len);\r\n}\r\nvar CommonUtil = {\r\n    phoneIsValid: phoneIsValid,\r\n    maskPhone: maskPhone,\r\n    idcardIsValid: idcardIsValid,\r\n    maskIDCard: maskIDCard,\r\n};\n\n/**\r\n * 对目标数组进行分块，每块size个元素\r\n * @param array 目标数组\r\n * @param size 块大小\r\n *\r\n * @example\r\n *   chunk(['a', 'b', 'c', 'd'], 2)\r\n *   // => [['a', 'b'], ['c', 'd']]\r\n *   chunk(['a', 'b', 'c', 'd'], 3)\r\n *   // => [['a', 'b', 'c'], ['d']]\r\n */\r\nfunction chunk(array, size) {\r\n    if (size === void 0) { size = 1; }\r\n    var length = array.length;\r\n    if (length === 0 || size < 1) {\r\n        return [];\r\n    }\r\n    var index = 0;\r\n    var resIndex = 0;\r\n    var result = Array(Math.ceil(length / size));\r\n    while (index < length) {\r\n        result[resIndex++] = slice(array, index, (index += size));\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * 对数组进行切片，索引支持负数(-1相当于最后一个元素，-2相当于倒数第二个元素，以此类推..)\r\n * @param {any[]} array 要进行切片的数组\r\n * @param {Number} start 开始下标，从0开始\r\n * @param {Number} end 结束下标，结果中不包含此下标的值\r\n *\r\n * @example\r\n *   slice([1, 2, 3, 4])\r\n *   // => [1, 2, 3, 4]\r\n *   slice([1, 2, 3, 4], 1)\r\n *   // => [2, 3, 4]\r\n *   slice([1, 2, 3, 4], 1, 3)\r\n *   // => [2, 3]\r\n *   slice([1, 2, 3, 4], -1)\r\n *   // => [4]\r\n *   slice([1, 2, 3, 4], -3, -1)\r\n *   // => [2, 3]\r\n */\r\nfunction slice(array, start, end) {\r\n    if (start === void 0) { start = 0; }\r\n    var length = array.length;\r\n    if (end === undefined) {\r\n        end = length;\r\n    }\r\n    if (start < 0) {\r\n        start = -start >= length ? 0 : (length + start);\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end = -end >= length ? 0 : (length + end);\r\n    }\r\n    length = start > end ? 0 : (end - start);\r\n    var result = Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n        result[i] = array[i + start];\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * 分组，将对象属性相同的对象分为一组\r\n * @param array 对象数组\r\n * @param by 对象属性\r\n *\r\n * @example\r\n *   group([{a:1,b:2,c:3}, {a:1,b:3}, {a:2, b:3, c:2}], 'a')\r\n *   // => [[{a:1, b:2, c:3}, {a:1, b:3}], [{a:2, b:3, c:2}]]\r\n *   group([{a:1,b:2,c:3}, {a:1,b:3}, {a:2, b:3, c:2}], 'b')\r\n *   // => [[{a:1, b:2, c:3}], [{a:1, b:3}, {a:2, b:3, c:2}]]\r\n *   group([{a:1,b:2,c:3}, {a:1,b:3}, {a:2, b:3, c:2}], 'c')\r\n *   // => [[{a:1, b:2, c:3}], [{a:1, b:3}], [{a:2, b:3, c:2}]]\r\n */\r\nfunction group(array, by) {\r\n    var result = [];\r\n    var temp = {};\r\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\r\n        var item = array_1[_i];\r\n        var key = by + '_' + item[by];\r\n        if (key in temp) {\r\n            temp[key].push(item);\r\n        }\r\n        else {\r\n            temp[key] = [item];\r\n        }\r\n    }\r\n    for (var _a = 0, _b = Object.keys(temp); _a < _b.length; _a++) {\r\n        var k = _b[_a];\r\n        result.push(temp[k]);\r\n    }\r\n    return result;\r\n}\r\nvar ArrayUtil = {\r\n    chunk: chunk,\r\n    slice: slice,\r\n    group: group,\r\n};\n\nexport { DateUtil, StringUtil, BaseUtil, NumberUtil, CommonUtil, ArrayUtil };\n"],"sourceRoot":""}